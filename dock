#!/bin/sh
#
# Script for easily running development systems in docker containers
# https://github.com/bripkens/dock
#

remote_repo=https://github.com/bripkens/dock.git
local_repo=$HOME/.dock


version() {
  echo "$(basename $0) 0.1.0 by Ben Ripkens <bripkens.dev@gmail.com>"
  echo "https://github.com/bripkens/dock"
}


usage() {
    version
cat << EOF >&2

TODO...

Usage:
    $(basename $0) [options]
    $(basename $0) [program]

Example:
    $(basename $0) redis

Options:
    -l, --list          List available boilerplates
    -u, --upgrade       Upgrade list of available boilerplates
    -h, --help          Display this help text
    -v, --version       Display current script version
EOF
}


clone() {
  if [ $1 -a $1 = '--silently' ]; then
    git clone -q "$remote_repo" "$local_repo"
  else
    echo "Cloning $remote_repo to $local_repo"
    git clone "$remote_repo" "$local_repo"
  fi
}


upgrade() {
  if [ ! -e "$local_repo/.git" ]; then
    clone
  else
    cd "$local_repo"
    git pull origin master
  fi
}


init() {
  if [ ! -e "$local_repo/.git" ]; then
    clone $1
  fi
}


list() {
  init --silently

  echo ":: Available Programs"
  for path in $(ls "$local_repo"/programs | sort -f); do
    filename=$(basename $path)
    echo "${filename%.*}"
  done
}


redock() {
  if hash boot2docker 2>/dev/null; then
    export DOCKER_IP=$(boot2docker ip 2>/dev/null)
    export DOCKER_HOST="tcp://$DOCKER_IP:2375"
  fi
}


dump() {
  init --silently

  program_file="$local_repo/programs/$1"

  if [ -e "$program_file" ]; then
    redock
    echo "Starting $1 (using $program_file)"
    sh $program_file
  else
    echo "Unknown argument: $1" >&2
  fi
}


# --- Main entry point ----------------------
if [ $# -eq 0 ]; then
  usage
  exit 0
fi

# Sanity check command-line options. We want either
# options like -l or arguments like Python, but not
# both
has_opts=0
has_args=0
for opt in $@; do
  if [ $( echo $opt | cut -c1) = "-" ]; then
    has_opts=1
  else
    has_args=1
  fi
done

if [ $has_opts -eq 1 -a $has_args -eq 1 ]; then
  usage
  exit 1
fi

# Parse comand-line options
while [ $# -gt 0 ]; do
  case $1 in
    -v | --version )
      version
      exit 1
      ;;
    -l | --list )
      list
      ;;
    -u | --upgrade )
      upgrade
      ;;
    -h | --help )
      usage
      exit 1
      ;;
    * ) # default case
      dump $1
      ;;
  esac
  shift
done
